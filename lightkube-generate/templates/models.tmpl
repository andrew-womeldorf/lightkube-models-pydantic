# autogenerated module
from dataclasses import field
from typing import List

from pydantic import BaseModel

{% for mod in modules %}
from {{mod.from_module}} import {{mod.module}}
{% endfor %}


{% for model in models %}
{% if model.has_properties %}
class {{ model.name }}(BaseModel):
    """{{ (model.description or "") | wordwrap(78, wrapstring='\n  ', break_on_hyphens=False, break_long_words=False) | indent( width=4, first=False) }}

      **parameters**

      {% for prop in model.properties %}
      * **{{prop.name}}** ``{{prop.type}}`` - {% if not prop.required %}*(optional)* {% endif %}{{ (prop.description or "") |
        wordwrap(78, wrapstring='\n    ', break_on_hyphens=False, break_long_words=False) | indent( width=4, first=False) }}
      {% endfor %}
    """
   {% for prop in model.properties %}
    {{prop.name}}: '{{prop.type}}'{{prop.default_repr}}
   {% endfor %}
{% else %}
{{ model.name }} = {{ model.type }}
{% endif %}


{% endfor %}
